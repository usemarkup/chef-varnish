# Happens after we have read the response headers from the backend.
# https://www.varnish-software.com/wiki/content/tutorials/varnish/builtin_vcl.html
# https://github.com/mattiasgeniar/varnish-4.0-configuration-templates/blob/master/default.vcl#L299

# Enable gzip https://varnish-cache.org/docs/4.0/phk/gzip.html
set beresp.do_gzip = true;

if (bereq.url ~ "^[^?]*\.(7z|avi|bmp|bz2|css|csv|doc|docx|eot|flac|flv|gif|gz|ico|jpeg|jpg|js|less|mka|mkv|mov|mp3|mp4|mpeg|mpg|odt|otf|ogg|ogm|opus|pdf|png|ppt|pptx|rar|rtf|svg|svgz|swf|tar|tbz|tgz|ttf|txt|txz|wav|webm|webp|woff|woff2|xls|xlsx|xml|xz|zip)(\?.*)?$") {
    unset beresp.http.set-cookie;
}

# Large static files are delivered directly to the end-user without
# waiting for Varnish to fully read the file first.
# Varnish 4 fully supports Streaming, so use streaming here to avoid locking.
if (bereq.url ~ "^[^?]*\.(7z|avi|bz2|flac|flv|gz|mka|mkv|mov|mp3|mp4|mpeg|mpg|ogg|ogm|opus|rar|tar|tgz|tbz|txz|wav|webm|xz|zip)(\?.*)?$") {
    unset beresp.http.set-cookie;
    set beresp.do_stream = true;  # Check memory usage it'll grow in fetch_chunksize blocks (128k by default) if the backend doesn't send a Content-Length header, so only enable it for big objects
}

if (beresp.ttl <= 0s ||
    beresp.http.Pragma ~ "no-cache" ||
    !beresp.http.Cache-Control ||
    beresp.http.Cache-Control ~ "no-cache|no-store|private"
) {
    set beresp.grace = 0s;
    set beresp.uncacheable = true;
}

if (beresp.ttl > 60s) {
    set beresp.grace = 6h;
}
